// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  avatar          String?
  totalXP         Int      @default(0)
  level           Int      @default(1)
  currentStreak   Int      @default(0)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Authentication
  password        String?
  emailVerified   Boolean  @default(false)
  
  // Relations
  sparks          Spark[]
  achievements    UserAchievement[]
  preferences     UserPreferences?
  notifications   Notification[]
  sessions        Session[]
  accounts        Account[]
  
  @@map("users")
}

model Spark {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  content     String?  // Rich markdown content
  status      SparkStatus @default(SEEDLING)
  xp          Int      @default(0)
  level       Int      @default(1)
  positionX   Float?
  positionY   Float?
  color       String   @default("#10b981")
  tags        String?  // Stored as JSON array string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos       Todo[]
  attachments Attachment[]
  connections SparkConnection[] @relation("SparkConnections1")
  connectedTo SparkConnection[] @relation("SparkConnections2")
}

model Todo {
  id          String     @id @default(cuid())
  sparkId     String
  title       String
  description String?
  completed   Boolean    @default(false)
  type        TodoType   @default(GENERAL)
  priority    TodoPriority @default(MEDIUM)
  positionX   Float?
  positionY   Float?
  createdAt   DateTime   @default(now())
  completedAt DateTime?
  
  spark Spark @relation(fields: [sparkId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String           @id @default(cuid())
  sparkId   String
  filename  String
  url       String
  type      AttachmentType
  size      Int?
  createdAt DateTime         @default(now())
  
  spark Spark @relation(fields: [sparkId], references: [id], onDelete: Cascade)
}

model SparkConnection {
  id        String         @id @default(cuid())
  sparkId1  String
  sparkId2  String
  type      ConnectionType @default(RELATED_TO)
  metadata  Json?
  createdAt DateTime       @default(now())
  
  spark1 Spark @relation("SparkConnections1", fields: [sparkId1], references: [id], onDelete: Cascade)
  spark2 Spark @relation("SparkConnections2", fields: [sparkId2], references: [id], onDelete: Cascade)
  
  @@unique([sparkId1, sparkId2])
}

model Achievement {
  id          String           @id @default(cuid())
  name        String
  description String
  icon        String
  xpReward    Int
  type        AchievementType
  createdAt   DateTime         @default(now())
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

model UserPreferences {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             Theme    @default(AUTO)
  soundEnabled      Boolean  @default(true)
  defaultSparkColor String   @default("#10b981")
  viewMode          ViewMode @default(CANVAS)
  
  // Notification preferences
  emailNotifications          Boolean  @default(true)
  pushNotifications           Boolean  @default(true)
  inAppNotifications          Boolean  @default(true)
  
  // Email notification types
  emailSparkUpdates           Boolean  @default(true)
  emailAchievementAlerts      Boolean  @default(true)
  emailCollaborationNotifications Boolean @default(true)
  
  // Push notification types
  pushSparkUpdates            Boolean  @default(true)
  pushAchievementAlerts       Boolean  @default(true)
  pushCollaborationNotifications Boolean @default(true)
  
  // In-app notification types
  inAppSparkUpdates           Boolean  @default(true)
  inAppAchievementAlerts      Boolean  @default(true)
  inAppCollaborationNotifications Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Notification {
  id                String              @id @default(cuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  isRead            Boolean             @default(false)
  priority          NotificationPriority @default(NORMAL)
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime            @default(now())
  expiresAt         DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum SparkStatus {
  SEEDLING
  SAPLING
  TREE
  FOREST
}

enum TodoType {
  GENERAL
  TASK
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
}

enum AttachmentType {
  IMAGE
  FILE
  LINK
}

enum AchievementType {
  MILESTONE
  STREAK
  COLLECTION
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum ViewMode {
  CANVAS
  KANBAN
  TIMELINE
}

enum ConnectionType {
  DEPENDS_ON
  RELATED_TO
  INSPIRES
  CONFLICTS_WITH
}

enum NotificationType {
  SPARK_UPDATE
  ACHIEVEMENT
  COLLABORATION
  SYSTEM
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}