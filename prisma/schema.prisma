// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  xp        Int      @default(0)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  sparks      Spark[]
  achievements UserAchievement[]
}

model Spark {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  content     String?  // Rich markdown content
  status      SparkStatus @default(SEEDLING)
  xp          Int      @default(0)
  level       Int      @default(1)
  positionX   Float?
  positionY   Float?
  color       String   @default("#10b981")
  tags        String?  // Stored as JSON array string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos       Todo[]
  attachments Attachment[]
  connections SparkConnection[] @relation("SparkConnections1")
  connectedTo SparkConnection[] @relation("SparkConnections2")
}

model Todo {
  id          String     @id @default(cuid())
  sparkId     String
  title       String
  description String?
  completed   Boolean    @default(false)
  type        TodoType   @default(GENERAL)
  priority    TodoPriority @default(MEDIUM)
  positionX   Float?
  positionY   Float?
  createdAt   DateTime   @default(now())
  completedAt DateTime?
  
  spark Spark @relation(fields: [sparkId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String           @id @default(cuid())
  sparkId   String
  filename  String
  url       String
  type      AttachmentType
  size      Int?
  createdAt DateTime         @default(now())
  
  spark Spark @relation(fields: [sparkId], references: [id], onDelete: Cascade)
}

model SparkConnection {
  id        String   @id @default(cuid())
  sparkId1  String
  sparkId2  String
  createdAt DateTime @default(now())
  
  spark1 Spark @relation("SparkConnections1", fields: [sparkId1], references: [id], onDelete: Cascade)
  spark2 Spark @relation("SparkConnections2", fields: [sparkId2], references: [id], onDelete: Cascade)
  
  @@unique([sparkId1, sparkId2])
}

model Achievement {
  id          String           @id @default(cuid())
  name        String
  description String
  icon        String
  xpReward    Int
  type        AchievementType
  createdAt   DateTime         @default(now())
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}

enum SparkStatus {
  SEEDLING
  SAPLING
  TREE
  FOREST
}

enum TodoType {
  GENERAL
  TASK
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
}

enum AttachmentType {
  IMAGE
  FILE
  LINK
}

enum AchievementType {
  MILESTONE
  STREAK
  COLLECTION
}